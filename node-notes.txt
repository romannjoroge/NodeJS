NPM
- NPM is the package manager used in node
- You install packages locally using npm install<package-name>
- To install pacakges globally you run npm install -g <package-name>

- To create a package.json file you run the comman npm init -y
- To create a npm script you change scripts section of package.json
- You run scripts by running npm <script-name> or npm run <script-name>

- To uninstall a npm package you run npm uninstall <package-name>

- npx allows you to run packages as if they were installed globally in your machine

EVENT LOOP
- It allows Node.js to perform non-blocking I/O operations -despite the fact that Javascript is single 
  threaded - by offloading operations to the system kernel
- Javascript being single-threaded means that it reads the code line by line. So code is executed only when
  the code above it is completely executed. This can cause issues when the code above takes a long time to run
- The issue above can be solved by offloading code execution to the system as Javascript runs the rest of 
  the code

EVENTS
- Actions in NodeJS are driven by EVENTS
- Use the events module require('events')
- on - listen for an event
  emit - emit an event
- one event can have many listeners that have different callback functions
- You first listen for an event before emitting it

STREAMS
- Are used to read and write sequentially, when we need to deal with continuos data or large data

HTTP
- request has the following data members: method, url

EXPRESS
- import it with the command require('express')
- Create an express app which is similar to creating a http server
    const app = express()
- app has some commonly used methods: get, put, push, delete, all, use and listen
  - app.listen - tells the server what port to listen on
  - app.get - a user accessing route with get method
  - app.use - a user accessing route with used for middleware
  - app. put - a user accessing route with put method
  - app.push - a user accessing route with push method
  - app.all - a user accessing a route with any method
  - app.use(express.static('<directory>')) - tells express where to find the static elements 
                                             of your site e.g css, Javascript code and images

API VS SSR 
- API - setting up a HTTP interface for interacting with data represented with json
      res.json - set up content types and stringing content data
- SSR - create a template that will send back entire HTML and Javascript files
      res.render

EXPRESS API
- The server provides data, this allows any frontend to send a HTTP request to our server and access the data
- Content type is content/json
- On the server you create the data, create the API and HTTP interface and the frontend graps the data

URL PARAMETER
- Allows you to send information to the server e.g
  https://google.com/search?q=food&tag=important
The info sent to the server is the q key with food value and the tag key with important value

MIDDLEWARE 
- Functions that execute during the request to the server
